name: ZAP Security Scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare workspace and network
        run: |
          set -eux
          mkdir -p "${GITHUB_WORKSPACE}/zap-reports"
          # create network if not exists
          docker network create zapnet || true
          # remove any previous containers with the same name
          docker rm -f juice-shop || true

      - name: Start Juice Shop container
        run: |
          set -eux
          docker run -d \
            --name juice-shop \
            --network zapnet \
            -p 3000:3000 \
            bkimminich/juice-shop

          echo "⏳ Waiting for Juice Shop to become available on http://localhost:3000 ..."
          # poll from the runner (host) because port 3000 is published
          for i in $(seq 1 60); do
            if curl -sSf http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Juice Shop is up!"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 2
          done

          # final check: if still not up, fail to make CI feedback immediate
          if ! curl -sSf http://localhost:3000 >/dev/null 2>&1; then
            echo "❌ Juice Shop did not start in time"
            docker logs juice-shop || true
            exit 1
          fi

      - name: Run OWASP ZAP Baseline Scan (with timeout)
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          set -eux
          cd "${WORKSPACE}"
          mkdir -p zap-reports

          # Run the ZAP baseline scan inside the official image.
          # Use timeout so the job won't hang forever (15 minutes).
          timeout 15m docker run --rm \
            --network zapnet \
            -v "${WORKSPACE}/zap-reports":/zap/wrk \
            zaproxy/zap-stable zap-baseline.py \
            -t http://juice-shop:3000 \
            -r zap_report.html \
            -J zap_report.json \
            -m 3

          echo "ZAP finished. Reports are in ${WORKSPACE}/zap-reports"

      - name: Show a short summary (optional)
        run: |
          set -eux
          if [ -f zap-reports/zap_report.json ]; then
            echo "Report JSON exists. Top-level keys:"
            jq 'keys' zap-reports/zap_report.json || true
            echo "Printing short summary (first site names):"
            jq -r '.site[]?.@name' zap-reports/zap_report.json || true
          else
            echo "No JSON report found in zap-reports/"
          fi

      - name: Install jq (for report check)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Make and run the report checker script
        run: |
          set -eux
          # Save the checker script (you can also keep it in repo)
          cat > zap-checker.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          REPORT_JSON="$1"
          if [ -z "${REPORT_JSON:-}" ]; then
            echo "Usage: $0 <zap_report.json>"
            exit 2
          fi
          if [ ! -f "$REPORT_JSON" ]; then
            echo "Report file not found: $REPORT_JSON"
            exit 2
          fi

          # Count High and Critical. Be defensive against missing fields.
          HIGH_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk == "High")] | length' "$REPORT_JSON")
          CRITICAL_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk == "Critical")] | length' "$REPORT_JSON")

          echo "High: $HIGH_COUNT, Critical: $CRITICAL_COUNT"

          if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "Failing build: found High/Critical issues"
            exit 1
          fi

          echo "No High/Critical issues found"
          exit 0
          EOF

          chmod +x zap-checker.sh

          # run checker against produced JSON (if exists)
          if [ -f zap-reports/zap_report.json ]; then
            ./zap-checker.sh zap-reports/zap_report.json
          else
            echo "No zap_report.json — failing the step to make problem visible"
            ls -la zap-reports || true
            exit 2
          fi

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap-reports/